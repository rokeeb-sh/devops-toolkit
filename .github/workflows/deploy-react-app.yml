name: React Application

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        type: string

      server_ip:
        description: 'Public IP address of the deployment server'
        required: true
        type: string

      server_user:
        description: 'SSH user for the remote server (e.g., ubuntu)'
        required: true
        type: string

      app_name:
        description: 'App folder name under the remote_dir'
        required: true
        type: string

      build_dir:
        description: 'Path to the build directory'
        required: false
        type: string
        default: 'build/*'

      remote_dir:
        description: 'Root path on the server where the app is deployed'
        required: false
        type: string
        default: '/var/www'

      pre_script:
        description: 'Optional pre-deployment shell commands'
        required: false
        type: string
        default: ''

      post_script:
        description: 'Optional post-deployment shell commands'
        required: false
        type: string
        default: ''

    secrets:
      ssh_key:
        description: 'Private SSH key with access to the server'
        required: false

      ssh_password:
        description: 'Password for SSH login (used if no ssh_key is provided)'
        required: false
  
jobs:
    deploy:
      name: Deploy React App
      runs-on: ubuntu-latest

      steps:
        - name: ‚¨áÔ∏è Checkout Repository
          uses: actions/checkout@v3

        - name: üöÄ Run Pre-Deployment Script
          if: ${{ inputs.pre_script != '' }}
          run: ${{ inputs.pre_script }}

        - name: üì• Install Dependencies
          run: yarn install --frozen-lockfile

        - name: üõ†Ô∏è Build Application
          run: yarn build

        - name: üì¶ SCP Upload to Remote Host
          uses: appleboy/scp-action@master
          with:
            host: ${{ inputs.server_ip }}
            username: ${{ inputs.server_user }}
            key: ${{ secrets.ssh_key }}
            password: ${{ secrets.ssh_password }}
            source: ${{ inputs.build_dir }}
            target: "${{ inputs.remote_dir }}temp/${{ inputs.app_name }}"

        - name: Post-Deployment
          uses: appleboy/ssh-action@master
          with:
            host: ${{ inputs.server_ip }}
            username: ${{ inputs.server_user }}
            key: ${{ secrets.ssh_key }}
            password: ${{ secrets.ssh_password }}
            script: |
              echo "üßπ Cleaning up old app directory..."
              rm -rf "${{ inputs.remote_dir }}/${{ inputs.app_name }}"

              echo "üöö Moving new build files to app directory..."
              mv "${{ inputs.remote_dir }}/temp/${{ inputs.app_name }}"/* "${{ inputs.remote_dir }}/${{ inputs.app_name }}"

              echo "üßΩ Removing temporary build folder..."
              rm -rf "${{ inputs.remote_dir }}/temp"

              echo "‚úÖ Creating .htaccess in app directory..."
              cat <<-EOL > "${{ inputs.remote_dir }}/${{ inputs.app_name }}/.htaccess"
                RewriteEngine On
                RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]
                RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d
                RewriteRule ^ - [L]
                RewriteRule ^ index.html [QSA,L]
              EOL

        - name: üöÄ Run Post-Deployment Script
          if: ${{ inputs.post_script != '' }}
          uses: appleboy/ssh-action@master
          with:
            host: ${{ inputs.server_ip }}
            username: ${{ inputs.server_user }}
            key: ${{ secrets.ssh_key }}
            password: ${{ secrets.ssh_password }}
            script: ${{ inputs.post_script }}
